name: Build Emailer

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  diagnose:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: List all files in repository
      run: |
        echo "=== ВСЕ ФАЙЛЫ В РЕПОЗИТОРИИ ==="
        find . -type f | sort
        
        echo "=== ПРОЕКТНЫЕ ФАЙЛЫ ==="
        find . -name "*.vbproj" -o -name "*.csproj" -o -name "*.sln" | sort
        
        echo "=== VB ФАЙЛЫ ==="
        find . -name "*.vb" | sort

  build:
    needs: diagnose
    strategy:
      matrix:
        runtime: [win-x64, linux-x64, osx-x64]
    
    runs-on: ${{ matrix.runtime == 'win-x64' && 'windows-latest' || matrix.runtime == 'linux-x64' && 'ubuntu-latest' || 'macos-latest' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Find project file
      id: find_project
      run: |
        echo "Поиск проектных файлов..."
        PROJECT_FILE=$(find . -name "*.vbproj" -o -name "*.csproj" | head -1)
        if [ -z "$PROJECT_FILE" ]; then
          echo "Проектный файл не найден! Создаем новый..."
          # Создаем минимальный vbproj файл
          cat > emailer.vbproj << 'EOF'
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <RootNamespace>Emailer</RootNamespace>
  </PropertyGroup>
</Project>
EOF
          PROJECT_FILE="emailer.vbproj"
        fi
        echo "PROJECT_FILE=$PROJECT_FILE" >> $GITHUB_OUTPUT
        echo "Найден проектный файл: $PROJECT_FILE"

    - name: Restore dependencies
      run: dotnet restore "${{ steps.find_project.outputs.PROJECT_FILE }}"

    - name: Build
      run: dotnet build "${{ steps.find_project.outputs.PROJECT_FILE }}" --configuration Release --no-restore

    - name: Publish
      run: dotnet publish "${{ steps.find_project.outputs.PROJECT_FILE }}" --configuration Release --runtime ${{ matrix.runtime }} --output publish/${{ matrix.runtime }} --self-contained true

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-${{ matrix.runtime }}
        path: publish/${{ matrix.runtime }}/