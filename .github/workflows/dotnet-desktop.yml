name: .NET Desktop Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: 'Release'

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
      
    - name: Test
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
      
    - name: Publish Windows app
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --no-build --output ./publish
      
    - name: Create Windows ZIP
      run: |
        New-Item -ItemType Directory -Path "./emailer" -Force
        Copy-Item -Path "./publish/*" -Destination "./emailer/" -Recurse
        Compress-Archive -Path "./emailer/" -DestinationPath "emailer-windows-${{ github.ref_name }}.zip" -Force
        Remove-Item -Path "./emailer" -Recurse -Force

    - name: Upload Windows ZIP
      uses: actions/upload-artifact@v4
      with:
        name: emailer-windows
        path: emailer-windows-${{ github.ref_name }}.zip

  linux-deb-package:
    name: Create DEB Package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
        
    - name: Publish for Linux
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime linux-x64 --self-contained true -p:PublishSingleFile=true --output ./publish-linux
        
    - name: Create DEB package
      run: |
        # Убираем 'v' из версии для DEB пакета
        VERSION="${{ github.ref_name }}"
        CLEAN_VERSION="${VERSION#v}"
        
        mkdir -p deb-package/usr/local/bin/emailer
        mkdir -p deb-package/DEBIAN
        
        cp -r publish-linux/* deb-package/usr/local/bin/emailer/
        
        cat > deb-package/DEBIAN/control << EOF
Package: emailer
Version: ${CLEAN_VERSION}-${{ github.run_number }}
Section: utils
Priority: optional
Architecture: amd64
Maintainer: Your Name <your-email@example.com>
Description: SMTP Email Sending Utility
EOF
        
        mkdir -p deb-package/usr/bin
        cat > deb-package/usr/bin/emailer << 'EOF'
#!/bin/bash
exec /usr/local/bin/emailer/emailer "\$@"
EOF
        chmod +x deb-package/usr/bin/emailer
        
        dpkg-deb --build deb-package emailer_${CLEAN_VERSION}-${{ github.run_number }}_amd64.deb
        
    - name: Upload DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-deb
        path: emailer_${CLEAN_VERSION}-${{ github.run_number }}_amd64.deb

  # ... остальные jobs (linux-rpm-package, linux-portable, macos-package) остаются аналогично

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, linux-deb-package]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: emailer ${{ github.ref_name }}
        body: |
          emailer - SMTP Email Sending Utility
          
          Features:
          - SMTP email sending with SSL/TLS
          - Cross-platform support
          - File attachment support
          - Password encryption
          - Comprehensive logging
          
          **Downloads:**
          - `emailer-windows-${{ github.ref_name }}.zip` - Windows portable
          - `emailer_*-${{ github.run_number }}_amd64.deb` - Linux DEB package
        files: |
          release-artifacts/emailer-windows-*.zip
          release-artifacts/emailer_*.deb
        draft: false
        prerelease: false
