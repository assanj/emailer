name: Build Emailer

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Find and verify project file
      id: find_project
      shell: bash
      run: |
        echo "=== Searching for project files in root ==="
        
        PROJECT_FILES=$(find . -maxdepth 1 -name "*.vbproj" -o -name "*.csproj" | head -5)
        
        if [ -z "$PROJECT_FILES" ]; then
          echo "‚ùå No project files found in root directory!"
          ls -la
          exit 1
        fi
        
        echo "üìÅ Found project files:"
        echo "$PROJECT_FILES"
        
        PROJECT_FILE=$(echo "$PROJECT_FILES" | head -1)
        echo "‚úÖ Using project file: $PROJECT_FILE"
        echo "PROJECT_FILE=$PROJECT_FILE" >> $GITHUB_OUTPUT

    - name: Restore dependencies
      run: dotnet restore "${{ steps.find_project.outputs.PROJECT_FILE }}"

    - name: Build
      run: dotnet build "${{ steps.find_project.outputs.PROJECT_FILE }}" --configuration Release --no-restore /nowarn:CA1416

    - name: Publish
      run: dotnet publish "${{ steps.find_project.outputs.PROJECT_FILE }}" --configuration Release --runtime win-x64 --output publish --self-contained true /nowarn:CA1416

    - name: Upload EXE to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: emailer-windows
        path: publish/
        retention-days: 30

  release:
    needs: build
    if: ${{ success() }}  # ‚Üê –ê–≤—Ç–æ-—Ä–µ–ª–∏–∑ –ø—Ä–∏ –ª—é–±–æ–π —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–µ
    runs-on: windows-latest
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: emailer-windows
        path: release-files

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/**/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}