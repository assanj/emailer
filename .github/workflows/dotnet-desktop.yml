name: .NET Desktop Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: 'Release'

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
      
    - name: Test
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
      
    - name: Publish
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --no-build --output ./publish
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: emailer-app
        path: ./publish/
        
  cross-platform-build:
    name: Cross-Platform Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
      
    - name: Test Cross-Platform Compatibility
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "Running Windows-specific tests"
          dotnet test --filter "Category=Windows"
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          echo "Running Linux-specific tests"
          dotnet test --filter "Category=Linux"
        else
          echo "Running macOS-specific tests"
          dotnet test --filter "Category=macOS"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Security Audit
      run: |
        dotnet list package --vulnerable --include-transitive
        dotnet dev-certs https --clean
        dotnet dev-certs https --trust
        
    - name: Run Security Tools
      run: |
        echo "Running basic security checks..."
        # Add security scanning tools here

  release:
    name: Create Release
    runs-on: windows-latest
    needs: [build, cross-platform-build, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: emailer-app
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.exe
          *.dll
          *.config
        body: |
          Emailer - SMTP Email Sending Utility
          
          Features:
          - SMTP email sending with SSL/TLS
          - Cross-platform support (Windows/Linux/macOS)
          - File attachment support
          - Password encryption
          - Comprehensive logging
          
          See README.md for full documentation.
        draft: false
        prerelease: false
