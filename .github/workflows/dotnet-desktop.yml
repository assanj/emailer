name: .NET Desktop Build and Test

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: 'Release'

permissions:
  contents: write

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install Costura.Fody
      run: |
        # Добавляем Costura.Fody в проект
        dotnet add package Costura.Fody --version 5.8.0
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build with Costura
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
      
    - name: Test
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
      
    - name: Publish Windows app (Single File with Costura)
      run: |
        # Публикуем как единый файл (Costura уже встроил зависимости)
        dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime win-x64 --self-contained true -p:PublishSingleFile=true --output ./publish-single
      
    - name: Verify single executable
      run: |
        echo "Checking single executable:"
        Get-ChildItem ./publish-single -Recurse -Filter *.exe
        if (-not (Test-Path "./publish-single/emailer.exe")) {
          echo "ERROR: Single executable not found!"
          exit 1
        }
        echo "Single executable created successfully"
        
    - name: Verify INI file included
      run: |
        echo "Checking if INI file is in publish directory:"
        Get-ChildItem ./publish-single -Recurse -Filter *.ini
        if (-not (Test-Path "./publish-single/config.ini")) {
          echo "WARNING: config.ini not found in publish directory"
        }
        
    - name: Create ZIP archive with single executable
      run: |
        $publishDir = "./publish-single"
        if (Test-Path $publishDir) {
          # Create emailer folder and copy single file + config
          New-Item -ItemType Directory -Path "./emailer-single" -Force
          Copy-Item -Path "$publishDir/emailer.exe" -Destination "./emailer-single/"
          Copy-Item -Path "$publishDir/config.ini" -Destination "./emailer-single/" -ErrorAction SilentlyContinue
          
          # Create ZIP with single executable
          $tagName = "${{ github.ref_name }}"
          if ($tagName -eq "") { $tagName = "latest" }
          Compress-Archive -Path "./emailer-single/" -DestinationPath "emailer-windows-single-$tagName.zip" -Force
          Remove-Item -Path "./emailer-single" -Recurse -Force
          echo "Single executable ZIP archive created successfully"
        } else {
          echo "Publish directory not found"
          exit 1
        }

    - name: Upload single executable ZIP
      uses: actions/upload-artifact@v4
      with:
        name: emailer-single-exe
        path: emailer-windows-single-*.zip
        retention-days: 30
        
    # Оригинальная сборка (оставляем для совместимости)
    - name: Publish Windows app (original)
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --no-build --output ./publish
      
    - name: Create ZIP archive with emailer folder (original)
      run: |
        $publishDir = "./publish"
        if (Test-Path $publishDir) {
          New-Item -ItemType Directory -Path "./emailer" -Force
          Copy-Item -Path "$publishDir/*" -Destination "./emailer/" -Recurse
          
          $tagName = "${{ github.ref_name }}"
          if ($tagName -eq "") { $tagName = "latest" }
          Compress-Archive -Path "./emailer/" -DestinationPath "emailer-windows-$tagName.zip" -Force
          Remove-Item -Path "./emailer" -Recurse -Force
          echo "ZIP archive with emailer folder created successfully"
        } else {
          echo "Publish directory not found"
          exit 1
        }
        
    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-zip
        path: emailer-windows-*.zip
        retention-days: 30
        
  # Остальные jobs остаются без изменений
  cross-platform-build:
    name: Cross-Platform Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install Costura.Fody
      run: dotnet add package Costura.Fody --version 5.8.0
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
      
    - name: Basic Functionality Test
      shell: bash
      run: |
        echo "Running basic functionality tests on $RUNNER_OS"
        dotnet test --verbosity normal

  # Остальные jobs (linux-rpm-package, linux-deb-package, linux-portable, macos-packages) 
  # остаются БЕЗ ИЗМЕНЕНИЙ - они используют свою логику сборки

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, cross-platform-build, linux-deb-package, linux-rpm-package, linux-portable, macos-packages]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      run: |
        mkdir -p release-artifacts
        
    - name: Download Windows single executable ZIP
      uses: actions/download-artifact@v4
      with:
        name: emailer-single-exe
        path: ./release-artifacts
        
    - name: Download Windows ZIP
      uses: actions/download-artifact@v4
      with:
        name: emailer-zip
        path: ./release-artifacts
        
    - name: Download DEB package
      uses: actions/download-artifact@v4
      with:
        name: emailer-deb-package
        path: ./release-artifacts
        
    - name: Download RPM package
      uses: actions/download-artifact@v4
      with:
        name: emailer-rpm-package
        path: ./release-artifacts
        
    - name: Download Linux portable
      uses: actions/download-artifact@v4
      with:
        name: emailer-linux-portable
        path: ./release-artifacts
        
    - name: Download macOS packages
      uses: actions/download-artifact@v4
      with:
        name: emailer-macos-packages
        path: ./release-artifacts
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build Release version
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: emailer ${{ github.ref_name }}
        body: |
          emailer - SMTP Email Sending Utility
          
          Features:
          - SMTP email sending with SSL/TLS
          - Cross-platform support (Windows/Linux/macOS)
          - File attachment support
          - Password encryption
          - Comprehensive logging
          - Configuration via config.ini file
          - **Single executable (Windows) - no dependencies!**
          
          **Downloads:**
          
          ### Windows
          - [emailer-windows-single-${{ github.ref_name }}.zip](https://github.com/assanj/emailer/releases/download/${{ github.ref_name }}/emailer-windows-single-${{ github.ref_name }}.zip) - **Single executable** (no dependencies, x64)
          - [emailer-windows-${{ github.ref_name }}.zip](https://github.com/assanj/emailer/releases/download/${{ github.ref_name }}/emailer-windows-${{ github.ref_name }}.zip) - Portable version with dependencies (x64)
          
          ### Linux
          - [emailer_1.0.0-${{ github.run_number }}_amd64.deb](https://github.com/assanj/emailer/releases/download/${{ github.ref_name }}/emailer_1.0.0-${{ github.run_number }}_amd64.deb) - DEB package (Ubuntu/Debian, amd64)
          - [emailer-1.0.0-${{ github.run_number }}.x86_64.rpm](https://github.com/assanj/emailer/releases/download/${{ github.ref_name }}/emailer-1.0.0-${{ github.run_number }}.x86_64.rpm) - RPM package (Fedora/RHEL/CentOS, x86_64)
          - [emailer-linux-${{ github.ref_name }}.zip](https://github.com/assanj/emailer/releases/download/${{ github.ref_name }}/emailer-linux-${{ github.ref_name }}.zip) - Portable version (x64)
          
          ### macOS
          - [emailer-macos-${{ github.ref_name }}.zip](https://github.com/assanj/emailer/releases/download/${{ github.ref_name }}/emailer-macos-${{ github.ref_name }}.zip) - Portable version (x64)
          
          **Installation Instructions:**
          
          ### Windows (Recommended - Single Executable):
          ```powershell
          # Download single executable (no dependencies needed!)
          Invoke-WebRequest -Uri "https://github.com/assanj/emailer/releases/download/${{ github.ref_name }}/emailer-windows-single-${{ github.ref_name }}.zip" -OutFile "emailer.zip"
          Expand-Archive -Path "emailer.zip" -DestinationPath "."
          cd emailer-single
          .\emailer.exe
          ```
          
          # ... остальная часть описания остается без изменений
        files: |
          ./release-artifacts/emailer-windows-single-*.zip
          ./release-artifacts/emailer-windows-*.zip
          ./release-artifacts/emailer_*.deb
          ./release-artifacts/emailer-*.rpm
          ./release-artifacts/emailer-linux-*.zip
          ./release-artifacts/emailer-macos-*.zip
        draft: false
        prerelease: false
