name: .NET Desktop Build and Test

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: 'Release'

permissions:
  contents: write

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
      
    - name: Test
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
      
    - name: Publish Windows app
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --no-build --output ./publish
      
    - name: Verify INI file included
      run: |
        echo "Checking if INI file is in publish directory:"
        Get-ChildItem ./publish -Recurse -Filter *.ini
        if (-not (Test-Path "./publish/config.ini")) {
          echo "WARNING: config.ini not found in publish directory"
        }
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: emailer-app
        path: ./publish/
        
    - name: Create ZIP archive with emailer folder
      run: |
        $publishDir = "./publish"
        if (Test-Path $publishDir) {
          # Create emailer folder and copy files
          New-Item -ItemType Directory -Path "./emailer" -Force
          Copy-Item -Path "$publishDir/*" -Destination "./emailer/" -Recurse
          
          # Create ZIP with emailer folder inside
          $tagName = "${{ github.ref_name }}"
          if ($tagName -eq "") { $tagName = "latest" }
          Compress-Archive -Path "./emailer/" -DestinationPath "emailer-windows-$tagName.zip" -Force
          Remove-Item -Path "./emailer" -Recurse -Force
          echo "ZIP archive with emailer folder created successfully"
        } else {
          echo "Publish directory not found"
          exit 1
        }
        
    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-zip
        path: emailer-windows-*.zip
        retention-days: 30
        
  cross-platform-build:
    name: Cross-Platform Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
      
    - name: Basic Functionality Test
      shell: bash
      run: |
        echo "Running basic functionality tests on $RUNNER_OS"
        dotnet test --verbosity normal

  linux-rpm-package:
    name: Create RPM Package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
        
    - name: Publish for Linux
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime linux-x64 --self-contained true --output ./publish-linux
        
    - name: Install fpm for easy package creation
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rpm build-essential
        sudo gem install fpm
        
    - name: Create RPM package using fpm
      run: |
        # Create package structure
        mkdir -p /tmp/emailer-pkg/usr/bin
        mkdir -p /tmp/emailer-pkg/usr/share/emailer
        
        # Copy application files
        cp -r publish-linux/* /tmp/emailer-pkg/usr/share/emailer/
        
        # Create launcher script
        cat > /tmp/emailer-pkg/usr/bin/emailer << 'EOF'
        #!/bin/bash
        exec /usr/share/emailer/emailer "$@"
        EOF
        chmod +x /tmp/emailer-pkg/usr/bin/emailer
        
        # Create RPM package
        fpm -s dir -t rpm \
          -n emailer \
          -v 1.0.0 \
          --iteration ${{ github.run_number }} \
          -C /tmp/emailer-pkg \
          --description "SMTP Email Sending Utility" \
          --url "https://github.com/assanj/emailer" \
          --maintainer "Your Name <your-email@example.com>" \
          usr/
        
    - name: Upload RPM artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-rpm-package
        path: emailer-*.rpm
        retention-days: 30
        
  linux-deb-package:
    name: Create DEB Package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
        
    - name: Publish for Linux
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime linux-x64 --self-contained true -p:PublishSingleFile=true --output ./publish-linux
        
    - name: Verify INI file for Linux
      run: |
        echo "Checking INI file for Linux build:"
        find ./publish-linux -name "*.ini"
        echo "Files in publish directory:"
        ls -la ./publish-linux/
        
    - name: Install dpkg tools
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev debhelper
        
    - name: Create DEB package structure
      run: |
        mkdir -p deb-package/usr/local/bin/emailer
        mkdir -p deb-package/DEBIAN
        mkdir -p deb-package/usr/share/applications
        
        # Copy published files (including INI)
        cp -r publish-linux/* deb-package/usr/local/bin/emailer/
        
        # Create control file for DEB package
        cat > deb-package/DEBIAN/control << EOF
        Package: emailer
        Version: 1.0.0-${{ github.run_number }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: Your Name <your-email@example.com>
        Description: SMTP Email Sending Utility
         emailer is a cross-platform application for sending emails via SMTP.
         Features include SSL/TLS support, file attachments, and comprehensive logging.
        EOF
        
        # Create launcher script
        mkdir -p deb-package/usr/bin
        cat > deb-package/usr/bin/emailer << EOF
        #!/bin/bash
        exec /usr/local/bin/emailer/emailer "\$@"
        EOF
        chmod +x deb-package/usr/bin/emailer
        
        # Create desktop file (optional)
        cat > deb-package/usr/share/applications/emailer.desktop << EOF
        [Desktop Entry]
        Name=Emailer
        Comment=SMTP Email Sending Utility
        Exec=/usr/bin/emailer
        Icon=emailer
        Terminal=false
        Type=Application
        Categories=Network;Email;
        EOF
        
        echo "DEB package structure created"
        
    - name: Build DEB package
      run: |
        dpkg-deb --build deb-package emailer_1.0.0-${{ github.run_number }}_amd64.deb
        echo "DEB package built successfully"
        
    - name: Upload DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-deb-package
        path: emailer_*.deb
        retention-days: 30
        
  linux-appimage:
    name: Create AppImage
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
        
    - name: Publish for Linux AppImage
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime linux-x64 --self-contained true -p:PublishSingleFile=true --output ./AppDir
        
    - name: Install FUSE for AppImage
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse libfuse2
        
    - name: Create simple AppImage structure
      run: |
        # Create simple launcher script
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        exec "${HERE}/emailer" "$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Create desktop file
        cat > AppDir/emailer.desktop << EOF
        [Desktop Entry]
        Name=Emailer
        Comment=SMTP Email Sending Utility
        Exec=emailer
        Icon=emailer
        Terminal=true
        Type=Application
        Categories=Network;Email;
        EOF
        
    - name: Create AppImage using appimagetool
      run: |
        # Download appimagetool
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Extract appimagetool first to avoid FUSE issues
        ./appimagetool-x86_64.AppImage --appimage-extract
        ./squashfs-root/AppRun AppDir emailer-${{ github.ref_name }}-x86_64.AppImage
        
    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-appimage
        path: emailer-*.AppImage
        retention-days: 30
        
  macos-packages:
    name: Create macOS Packages
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
        
    - name: Publish for macOS
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime osx-x64 --self-contained true -p:PublishSingleFile=true --output ./publish-macos
        
    - name: Verify INI file for macOS
      run: |
        echo "Checking INI file for macOS build:"
        find ./publish-macos -name "*.ini"
        
    - name: Create macOS ZIP package with emailer folder
      run: |
        # Create emailer folder and copy files
        mkdir -p emailer
        cp -r publish-macos/* emailer/
        
        # Create ZIP with emailer folder inside
        zip -r emailer-macos-${{ github.ref_name }}.zip emailer/
        
        # Cleanup temp folder
        rm -rf emailer
        echo "macOS ZIP package with emailer folder created"
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: emailer-macos-packages
        path: emailer-macos-*.zip
        retention-days: 30
        
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, cross-platform-build, linux-deb-package, linux-rpm-package, linux-appimage, macos-packages]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      run: |
        mkdir -p release-artifacts
        
    - name: Download Windows ZIP
      uses: actions/download-artifact@v4
      with:
        name: emailer-zip
        path: ./release-artifacts
        
    - name: Download DEB package
      uses: actions/download-artifact@v4
      with:
        name: emailer-deb-package
        path: ./release-artifacts
        
    - name: Download RPM package
      uses: actions/download-artifact@v4
      with:
        name: emailer-rpm-package
        path: ./release-artifacts
        
    - name: Download AppImage
      uses: actions/download-artifact@v4
      with:
        name: emailer-appimage
        path: ./release-artifacts
        
    - name: Download macOS packages
      uses: actions/download-artifact@v4
      with:
        name: emailer-macos-packages
        path: ./release-artifacts
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build Release version
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: emailer ${{ github.ref_name }}
        body: |
          emailer - SMTP Email Sending Utility
          
          Features:
          - SMTP email sending with SSL/TLS
          - Cross-platform support (Windows/Linux/macOS)
          - File attachment support
          - Password encryption
          - Comprehensive logging
          - Configuration via config.ini file
          
          **Downloads:**
          
          ### Windows
          - `emailer-windows-${{ github.ref_name }}.zip` - Portable version (x64)
          
          ### Linux
          - `emailer_*.deb` - DEB package (Ubuntu/Debian, amd64)
          - `emailer-*.rpm` - RPM package (Fedora/RHEL/CentOS, x86_64)
          - `emailer-*.AppImage` - Universal AppImage (all distributions)
          
          ### macOS
          - `emailer-macos-${{ github.ref_name }}.zip` - Portable version (x64)
          
          **Installation:**
          - **Windows**: Extract ZIP and run `emailer.exe`
          - **Linux DEB**: `sudo dpkg -i emailer_*.deb`
          - **Linux RPM**: `sudo rpm -i emailer-*.rpm` 
          - **Linux AppImage**: `chmod +x emailer-*.AppImage && ./emailer-*.AppImage`
          - **macOS**: Extract ZIP and run `emailer`
          
          **Configuration:**
          Edit `config.ini` file to configure SMTP settings and defaults.
          
          See README.md for full documentation.
        files: |
          ./release-artifacts/emailer-windows-*.zip
          ./release-artifacts/emailer_*.deb
          ./release-artifacts/emailer-*.rpm
          ./release-artifacts/emailer-*.AppImage
          ./release-artifacts/emailer-macos-*.zip
        draft: false
        prerelease: false
