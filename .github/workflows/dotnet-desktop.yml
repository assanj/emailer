name: .NET Desktop Build and Test

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: 'Release'

permissions:
  contents: write

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
      
    - name: Test
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
      
    - name: Publish Windows app (Single File)
      run: |
        # Публикуем как единый файл для Windows БЕЗ временных папок
        dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=false -p:IncludeNativeLibrariesForSelfExtract=false --output ./publish-windows
      
    - name: Copy config files to publish directory
      run: |
        copy emailer.ini publish-windows\ 2>nul || echo "emailer.ini not found"
        copy readme.txt publish-windows\ 2>nul || echo "readme.txt not found"
      
    - name: Verify files included
      run: |
        echo "Checking files in publish directory:"
        Get-ChildItem ./publish-windows -Recurse
        if (-not (Test-Path "./publish-windows/emailer.exe")) {
          echo "ERROR: emailer.exe not found!"
          exit 1
        }
        if (-not (Test-Path "./publish-windows/emailer.ini")) {
          echo "WARNING: emailer.ini not found in publish directory"
        }
        if (-not (Test-Path "./publish-windows/readme.txt")) {
          echo "WARNING: readme.txt not found in publish directory"
        }
        echo "All files verified successfully"
        
    - name: Create ZIP archive with emailer folder
      run: |
        $publishDir = "./publish-windows"
        if (Test-Path $publishDir) {
          # Create emailer folder and copy files
          New-Item -ItemType Directory -Path "./emailer" -Force
          Copy-Item -Path "$publishDir/*" -Destination "./emailer/" -Recurse
          
          # Create ZIP with emailer folder inside
          $tagName = "${{ github.ref_name }}"
          if ($tagName -eq "") { $tagName = "latest" }
          Compress-Archive -Path "./emailer/" -DestinationPath "emailer-windows-$tagName.zip" -Force
          Remove-Item -Path "./emailer" -Recurse -Force
          echo "ZIP archive with emailer folder created successfully"
        } else {
          echo "Publish directory not found"
          exit 1
        }
        
    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-zip
        path: emailer-windows-*.zip
        retention-days: 30
        
  cross-platform-build:
    name: Cross-Platform Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }}
      
    - name: Basic Functionality Test
      shell: bash
      run: |
        echo "Running basic functionality tests on $RUNNER_OS"
        dotnet test --verbosity normal

  linux-rpm-package:
    name: Create RPM Package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Publish for Linux (Single File)
      run: |
        # Публикуем как единый файл для Linux БЕЗ временных папок
        dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime linux-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=false -p:IncludeNativeLibrariesForSelfExtract=false --output ./publish-linux
        
    - name: Copy config files to publish directory
      run: |
        cp emailer.ini publish-linux/ 2>/dev/null || echo "emailer.ini not found"
        cp readme.txt publish-linux/ 2>/dev/null || echo "readme.txt not found"
        
    - name: Install fpm for easy package creation
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rpm build-essential
        sudo gem install fpm
        
    - name: Create RPM package using fpm
      run: |
        # Create package structure
        mkdir -p /tmp/emailer-pkg/usr/bin
        mkdir -p /tmp/emailer-pkg/usr/share/emailer
        
        # Copy application files
        cp -r publish-linux/* /tmp/emailer-pkg/usr/share/emailer/
        
        # Create launcher script
        cat > /tmp/emailer-pkg/usr/bin/emailer << 'EOF'
        #!/bin/bash
        exec /usr/share/emailer/emailer "$@"
        EOF
        chmod +x /tmp/emailer-pkg/usr/bin/emailer
        
        # Create RPM package
        fpm -s dir -t rpm \
          -n emailer \
          -v 1.0.0 \
          --iteration ${{ github.run_number }} \
          -C /tmp/emailer-pkg \
          --description "SMTP Email Sending Utility" \
          --url "https://github.com/assanj/emailer" \
          --maintainer "Your Name <your-email@example.com>" \
          usr/
        
    - name: Upload RPM artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-rpm-package
        path: emailer-*.rpm
        retention-days: 30
        
  linux-deb-package:
    name: Create DEB Package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Publish for Linux (Single File)
      run: |
        # Публикуем как единый файл для Linux БЕЗ временных папок
        dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime linux-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=false -p:IncludeNativeLibrariesForSelfExtract=false --output ./publish-linux
        
    - name: Copy config files to publish directory
      run: |
        cp emailer.ini publish-linux/ 2>/dev/null || echo "emailer.ini not found"
        cp readme.txt publish-linux/ 2>/dev/null || echo "readme.txt not found"
        
    - name: Verify files for Linux
      run: |
        echo "Checking files for Linux build:"
        find ./publish-linux -name "*"
        echo "Files in publish directory:"
        ls -la ./publish-linux/
        
    - name: Install dpkg tools
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev debhelper
        
    - name: Create DEB package structure
      run: |
        mkdir -p deb-package/usr/local/bin/emailer
        mkdir -p deb-package/DEBIAN
        
        # Copy published files (including INI and readme)
        cp -r publish-linux/* deb-package/usr/local/bin/emailer/
        
        # Create control file for DEB package
        cat > deb-package/DEBIAN/control << EOF
        Package: emailer
        Version: 1.0.0-${{ github.run_number }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: Your Name <your-email@example.com>
        Description: SMTP Email Sending Utility
         emailer is a cross-platform application for sending emails via SMTP.
         Features include SSL/TLS support, file attachments, and comprehensive logging.
        EOF
        
        # Create launcher script
        mkdir -p deb-package/usr/bin
        cat > deb-package/usr/bin/emailer << EOF
        #!/bin/bash
        exec /usr/local/bin/emailer/emailer "\$@"
        EOF
        chmod +x deb-package/usr/bin/emailer
        
        echo "DEB package structure created"
        
    - name: Build DEB package
      run: |
        dpkg-deb --build deb-package emailer_1.0.0-${{ github.run_number }}_amd64.deb
        echo "DEB package built successfully"
        
    - name: Upload DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-deb-package
        path: emailer_*.deb
        retention-days: 30
        
  linux-portable:
    name: Create Linux Portable
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Publish for Linux (Single File)
      run: |
        # Публикуем как единый файл для Linux БЕЗ временных папок
        dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime linux-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=false -p:IncludeNativeLibrariesForSelfExtract=false --output ./publish-linux
        
    - name: Copy config files to publish directory
      run: |
        cp emailer.ini publish-linux/ 2>/dev/null || echo "emailer.ini not found"
        cp readme.txt publish-linux/ 2>/dev/null || echo "readme.txt not found"
        
    - name: Create Linux ZIP package with emailer folder
      run: |
        # Create emailer folder and copy files
        mkdir -p emailer
        cp -r publish-linux/* emailer/
        
        # Create ZIP with emailer folder inside
        zip -r emailer-linux-${{ github.ref_name }}.zip emailer/
        
        # Cleanup temp folder
        rm -rf emailer
        echo "Linux ZIP package with emailer folder created"
        
    - name: Upload Linux portable artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailer-linux-portable
        path: emailer-linux-*.zip
        retention-days: 30
        
  macos-packages:
    name: Create macOS Packages
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Publish for macOS (Single File)
      run: |
        # Публикуем как единый файл для macOS БЕЗ временных папок
        dotnet publish --configuration ${{ env.CONFIGURATION }} --runtime osx-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=false -p:IncludeNativeLibrariesForSelfExtract=false --output ./publish-macos
        
    - name: Copy config files to publish directory
      run: |
        cp emailer.ini publish-macos/ 2>/dev/null || echo "emailer.ini not found"
        cp readme.txt publish-macos/ 2>/dev/null || echo "readme.txt not found"
        
    - name: Verify files for macOS
      run: |
        echo "Checking files for macOS build:"
        find ./publish-macos -name "*"
        
    - name: Create macOS ZIP package with emailer folder
      run: |
        # Create emailer folder and copy files
        mkdir -p emailer
        cp -r publish-macos/* emailer/
        
        # Create ZIP with emailer folder inside
        zip -r emailer-macos-${{ github.ref_name }}.zip emailer/
        
        # Cleanup temp folder
        rm -rf emailer
        echo "macOS ZIP package with emailer folder created"
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: emailer-macos-packages
        path: emailer-macos-*.zip
        retention-days: 30
